# chrome 57.0.2987.133
# node v7.7.4

# 1
ws.js:208 Float64Array x 2,286 ops/sec ±5.54% (54 runs sampled)
ws.js:208 Float32Array x 2,310 ops/sec ±3.56% (54 runs sampled)
ws.js:208 Int32Array x 2,391 ops/sec ±3.13% (55 runs sampled)
ws.js:208 Int8Array x 2,334 ops/sec ±4.45% (52 runs sampled)
ws.js:208 Array x 2,383 ops/sec ±2.24% (54 runs sampled)
ws.js:208 Array<Int> x 2,339 ops/sec ±3.90% (53 runs sampled)
ws.js:208 Object x 2,246 ops/sec ±3.56% (55 runs sampled)
ws.js:211 Fastest is Array,Array<Int>,Int8Array,Float32Array

ws.js:208 Float64Array x 2,340 ops/sec ±3.87% (51 runs sampled)
ws.js:208 Float32Array x 2,363 ops/sec ±4.47% (52 runs sampled)
ws.js:208 Int32Array x 2,383 ops/sec ±3.73% (52 runs sampled)
ws.js:208 Int8Array x 2,396 ops/sec ±4.23% (52 runs sampled)
ws.js:208 Array x 2,364 ops/sec ±3.88% (52 runs sampled)
ws.js:208 Array<Int> x 2,359 ops/sec ±3.44% (52 runs sampled)
ws.js:208 Object x 2,263 ops/sec ±3.81% (53 runs sampled)
ws.js:211 Fastest is Int8Array,Int32Array,Array,Float32Array,Float64Array

ws.js:208 Float64Array x 2,572 ops/sec ±4.26% (53 runs sampled)
ws.js:208 Float32Array x 2,503 ops/sec ±4.01% (53 runs sampled)
ws.js:208 Int32Array x 2,465 ops/sec ±5.21% (53 runs sampled)
ws.js:208 Int8Array x 2,441 ops/sec ±5.11% (51 runs sampled)
ws.js:208 Array x 2,452 ops/sec ±2.87% (55 runs sampled)
ws.js:208 Array<Int> x 2,464 ops/sec ±3.55% (54 runs sampled)
ws.js:208 Object x 2,395 ops/sec ±2.85% (54 runs sampled)
ws.js:211 Fastest is Float64Array,Float32Array,Int8Array

# 10
ws.js:208 Float64Array x 2,235 ops/sec ±4.55% (53 runs sampled)
ws.js:208 Float32Array x 2,431 ops/sec ±2.82% (54 runs sampled)
ws.js:208 Int32Array x 2,375 ops/sec ±3.76% (53 runs sampled)
ws.js:208 Int8Array x 2,450 ops/sec ±3.14% (53 runs sampled)
ws.js:208 Array x 2,168 ops/sec ±2.52% (56 runs sampled)
ws.js:208 Array<Int> x 2,450 ops/sec ±2.88% (54 runs sampled)
ws.js:208 Object x 2,067 ops/sec ±2.94% (52 runs sampled)
ws.js:211 Fastest is Array<Int>,Int8Array,Float32Array,Int32Array

ws.js:208 Float64Array x 2,284 ops/sec ±3.42% (56 runs sampled)
ws.js:208 Float32Array x 2,408 ops/sec ±3.12% (53 runs sampled)
ws.js:208 Int32Array x 2,408 ops/sec ±2.78% (55 runs sampled)
ws.js:208 Int8Array x 2,474 ops/sec ±2.23% (56 runs sampled)
ws.js:208 Array x 2,230 ops/sec ±2.98% (52 runs sampled)
ws.js:208 Array<Int> x 2,377 ops/sec ±4.13% (54 runs sampled)
ws.js:208 Object x 2,160 ops/sec ±3.48% (53 runs sampled)
ws.js:211 Fastest is Int8Array,Float32Array

ws.js:208 Float64Array x 2,261 ops/sec ±3.27% (54 runs sampled)
ws.js:208 Float32Array x 2,307 ops/sec ±3.72% (53 runs sampled)
ws.js:208 Int32Array x 2,359 ops/sec ±3.65% (52 runs sampled)
ws.js:208 Int8Array x 2,433 ops/sec ±2.80% (55 runs sampled)
ws.js:208 Array x 2,183 ops/sec ±3.54% (55 runs sampled)
ws.js:208 Array<Int> x 2,462 ops/sec ±2.05% (56 runs sampled)
ws.js:208 Object x 2,141 ops/sec ±2.60% (56 runs sampled)
ws.js:211 Fastest is Array<Int>,Int8Array,Int32Array

# 100
ws.js:208 Float64Array x 1,132 ops/sec ±2.93% (56 runs sampled)
ws.js:208 Float32Array x 2,464 ops/sec ±1.96% (58 runs sampled)
ws.js:208 Int32Array x 1,884 ops/sec ±2.40% (55 runs sampled)
ws.js:208 Int8Array x 2,690 ops/sec ±3.27% (56 runs sampled)
ws.js:208 Array x 1,316 ops/sec ±1.67% (58 runs sampled)
ws.js:208 Array<Int> x 2,458 ops/sec ±2.14% (57 runs sampled)
ws.js:208 Object x 1,172 ops/sec ±1.44% (59 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 1,140 ops/sec ±2.82% (54 runs sampled)
ws.js:208 Float32Array x 2,505 ops/sec ±1.51% (59 runs sampled)
ws.js:208 Int32Array x 1,903 ops/sec ±1.91% (56 runs sampled)
ws.js:208 Int8Array x 2,706 ops/sec ±3.14% (56 runs sampled)
ws.js:208 Array x 1,329 ops/sec ±1.24% (59 runs sampled)
ws.js:208 Array<Int> x 2,454 ops/sec ±2.11% (58 runs sampled)
ws.js:208 Object x 1,181 ops/sec ±1.53% (58 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 1,090 ops/sec ±3.23% (53 runs sampled)
ws.js:208 Float32Array x 2,462 ops/sec ±1.62% (59 runs sampled)
ws.js:208 Int32Array x 1,811 ops/sec ±2.84% (55 runs sampled)
ws.js:208 Int8Array x 2,567 ops/sec ±3.39% (55 runs sampled)
ws.js:208 Array x 1,312 ops/sec ±1.74% (58 runs sampled)
ws.js:208 Array<Int> x 2,427 ops/sec ±1.85% (58 runs sampled)
ws.js:208 Object x 1,169 ops/sec ±1.23% (59 runs sampled)
ws.js:211 Fastest is Int8Array

# 1024
ws.js:208 Float64Array x 104 ops/sec ±2.12% (54 runs sampled)
ws.js:208 Float32Array x 1,101 ops/sec ±1.93% (54 runs sampled)
ws.js:208 Int32Array x 383 ops/sec ±3.03% (54 runs sampled)
ws.js:208 Int8Array x 2,067 ops/sec ±1.75% (56 runs sampled)
ws.js:208 Array x 252 ops/sec ±1.23% (56 runs sampled)
ws.js:208 Array<Int> x 1,037 ops/sec ±1.30% (57 runs sampled)
ws.js:208 Object x 211 ops/sec ±1.01% (55 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 103 ops/sec ±2.61% (54 runs sampled)
ws.js:208 Float32Array x 1,117 ops/sec ±2.12% (56 runs sampled)
ws.js:208 Int32Array x 420 ops/sec ±1.87% (56 runs sampled)
ws.js:208 Int8Array x 2,045 ops/sec ±2.21% (57 runs sampled)
ws.js:208 Array x 258 ops/sec ±0.98% (60 runs sampled)
ws.js:208 Array<Int> x 1,046 ops/sec ±1.59% (57 runs sampled)
ws.js:208 Object x 209 ops/sec ±1.15% (58 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 103 ops/sec ±2.90% (53 runs sampled)
ws.js:208 Float32Array x 1,091 ops/sec ±1.68% (58 runs sampled)
ws.js:208 Int32Array x 424 ops/sec ±1.60% (58 runs sampled)
ws.js:208 Int8Array x 2,056 ops/sec ±2.23% (57 runs sampled)
ws.js:208 Array x 260 ops/sec ±1.00% (57 runs sampled)
ws.js:208 Array<Int> x 1,047 ops/sec ±1.35% (59 runs sampled)
ws.js:208 Object x 213 ops/sec ±0.97% (58 runs sampled)
ws.js:211 Fastest is Int8Array

# 2048
ws.js:208 Float64Array x 53.48 ops/sec ±1.22% (49 runs sampled)
ws.js:208 Float32Array x 743 ops/sec ±1.47% (56 runs sampled)
ws.js:208 Int32Array x 196 ops/sec ±1.52% (57 runs sampled)
ws.js:208 Int8Array x 1,836 ops/sec ±1.87% (57 runs sampled)
ws.js:208 Array x 55.31 ops/sec ±0.34% (53 runs sampled)
ws.js:208 Array<Int> x 592 ops/sec ±1.13% (55 runs sampled)
ws.js:208 Object x 42.30 ops/sec ±0.90% (51 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 53.10 ops/sec ±1.16% (48 runs sampled)
ws.js:208 Float32Array x 723 ops/sec ±2.83% (54 runs sampled)
ws.js:208 Int32Array x 199 ops/sec ±1.09% (57 runs sampled)
ws.js:208 Int8Array x 1,840 ops/sec ±2.01% (57 runs sampled)
ws.js:208 Array x 55.06 ops/sec ±0.65% (53 runs sampled)
ws.js:208 Array<Int> x 581 ops/sec ±1.85% (55 runs sampled)
ws.js:208 Object x 41.28 ops/sec ±0.67% (50 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 52.77 ops/sec ±2.47% (48 runs sampled)
ws.js:208 Float32Array x 736 ops/sec ±1.70% (57 runs sampled)
ws.js:208 Int32Array x 197 ops/sec ±1.29% (55 runs sampled)
ws.js:208 Int8Array x 1,821 ops/sec ±2.67% (56 runs sampled)
ws.js:208 Array x 55.14 ops/sec ±0.62% (53 runs sampled)
ws.js:208 Array<Int> x 605 ops/sec ±1.50% (56 runs sampled)
ws.js:208 Object x 41.28 ops/sec ±0.81% (50 runs sampled)
ws.js:211 Fastest is Int8Array

# 4096
ws.js:208 Float64Array x 27.50 ops/sec ±1.67% (40 runs sampled)
ws.js:208 Float32Array x 388 ops/sec ±1.98% (57 runs sampled)
ws.js:208 Int32Array x 99.03 ops/sec ±1.76% (51 runs sampled)
ws.js:208 Int8Array x 1,489 ops/sec ±1.49% (57 runs sampled)
ws.js:208 Array x 28.11 ops/sec ±0.58% (46 runs sampled)
ws.js:208 Array<Int> x 323 ops/sec ±1.60% (56 runs sampled)
ws.js:208 Object x 20.68 ops/sec ±0.75% (50 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 27.14 ops/sec ±1.90% (39 runs sampled)
ws.js:208 Float32Array x 394 ops/sec ±2.13% (55 runs sampled)
ws.js:208 Int32Array x 97.03 ops/sec ±1.83% (55 runs sampled)
ws.js:208 Int8Array x 1,483 ops/sec ±2.37% (56 runs sampled)
ws.js:208 Array x 28.12 ops/sec ±0.44% (46 runs sampled)
ws.js:208 Array<Int> x 316 ops/sec ±1.83% (55 runs sampled)
ws.js:208 Object x 20.64 ops/sec ±1.11% (50 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 27.62 ops/sec ±1.82% (40 runs sampled)
ws.js:208 Float32Array x 389 ops/sec ±1.99% (56 runs sampled)
ws.js:208 Int32Array x 99.05 ops/sec ±2.36% (51 runs sampled)
ws.js:208 Int8Array x 1,472 ops/sec ±2.34% (57 runs sampled)
ws.js:208 Array x 28.08 ops/sec ±0.43% (46 runs sampled)
ws.js:208 Array<Int> x 327 ops/sec ±1.43% (57 runs sampled)
ws.js:208 Object x 21.61 ops/sec ±0.57% (52 runs sampled)
ws.js:211 Fastest is Int8Array

# 10 * 1024
ws.js:208 Float64Array x 10.90 ops/sec ±1.14% (36 runs sampled)
ws.js:208 Float32Array x 88.07 ops/sec ±1.73% (53 runs sampled)
ws.js:208 Int32Array x 34.47 ops/sec ±1.79% (48 runs sampled)
ws.js:208 Int8Array x 978 ops/sec ±1.20% (55 runs sampled)
ws.js:208 Array x 11.50 ops/sec ±0.50% (54 runs sampled)
ws.js:208 Array<Int> x 53.14 ops/sec ±1.27% (51 runs sampled)
ws.js:208 Object x 8.80 ops/sec ±1.25% (44 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 10.89 ops/sec ±1.24% (36 runs sampled)
ws.js:208 Float32Array x 91.11 ops/sec ±1.24% (54 runs sampled)
ws.js:208 Int32Array x 34.58 ops/sec ±1.75% (40 runs sampled)
ws.js:208 Int8Array x 972 ops/sec ±1.28% (58 runs sampled)
ws.js:208 Array x 11.51 ops/sec ±0.60% (54 runs sampled)
ws.js:208 Array<Int> x 53.93 ops/sec ±0.52% (52 runs sampled)
ws.js:208 Object x 8.86 ops/sec ±0.51% (44 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 10.99 ops/sec ±1.32% (36 runs sampled)
ws.js:208 Float32Array x 90.96 ops/sec ±1.12% (53 runs sampled)
ws.js:208 Int32Array x 33.80 ops/sec ±1.37% (39 runs sampled)
ws.js:208 Int8Array x 968 ops/sec ±1.27% (58 runs sampled)
ws.js:208 Array x 11.51 ops/sec ±0.61% (54 runs sampled)
ws.js:208 Array<Int> x 53.83 ops/sec ±0.87% (52 runs sampled)
ws.js:208 Object x 8.86 ops/sec ±0.81% (44 runs sampled)
ws.js:211 Fastest is Int8Array

# 100 * 1024
ws.js:208 Float64Array x 1.17 ops/sec ±1.79% (8 runs sampled)
ws.js:208 Float32Array x 7.87 ops/sec ±6.36% (35 runs sampled)
ws.js:208 Int32Array x 3.48 ops/sec ±5.70% (15 runs sampled)
ws.js:208 Int8Array x 162 ops/sec ±2.48% (52 runs sampled)
ws.js:208 Array x 1.18 ops/sec ±0.53% (10 runs sampled)
ws.js:208 Array<Int> x 5.55 ops/sec ±2.04% (30 runs sampled)
ws.js:208 Object x 0.84 ops/sec ±0.80% (8 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 1.14 ops/sec ±6.09% (8 runs sampled)
ws.js:208 Float32Array x 7.84 ops/sec ±7.16% (35 runs sampled)
ws.js:208 Int32Array x 3.62 ops/sec ±5.57% (15 runs sampled)
ws.js:208 Int8Array x 163 ops/sec ±2.50% (52 runs sampled)
ws.js:208 Array x 1.18 ops/sec ±0.33% (10 runs sampled)
ws.js:208 Array<Int> x 5.57 ops/sec ±1.66% (30 runs sampled)
ws.js:208 Object x 0.83 ops/sec ±0.62% (8 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 1.15 ops/sec ±5.12% (8 runs sampled)
ws.js:208 Float32Array x 7.98 ops/sec ±6.06% (35 runs sampled)
ws.js:208 Int32Array x 3.44 ops/sec ±5.52% (15 runs sampled)
ws.js:208 Int8Array x 162 ops/sec ±3.36% (55 runs sampled)
ws.js:208 Array x 1.18 ops/sec ±0.61% (10 runs sampled)
ws.js:208 Array<Int> x 5.57 ops/sec ±1.77% (30 runs sampled)
ws.js:208 Object x 0.83 ops/sec ±0.49% (8 runs sampled)
ws.js:211 Fastest is Int8Array

# 1024 * 1024
ws.js:208 Float64Array x 0.11 ops/sec ±7.65% (5 runs sampled)
ws.js:208 Float32Array x 0.61 ops/sec ±7.45% (7 runs sampled)
ws.js:208 Int32Array x 0.32 ops/sec ±4.33% (6 runs sampled)
ws.js:208 Int8Array x 10.06 ops/sec ±18.66% (27 runs sampled)
ws.js:208 Array x 0.11 ops/sec ±0.64% (5 runs sampled)
ws.js:208 Array<Int> x 0.50 ops/sec ±2.28% (7 runs sampled)
ws.js:208 Object x 0.08 ops/sec ±2.12% (5 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 0.11 ops/sec ±8.06% (5 runs sampled)
ws.js:208 Float32Array x 0.71 ops/sec ±3.73% (7 runs sampled)
ws.js:208 Int32Array x 0.32 ops/sec ±3.75% (5 runs sampled)
ws.js:208 Int8Array x 10.36 ops/sec ±17.80% (28 runs sampled)
ws.js:208 Array x 0.11 ops/sec ±0.70% (5 runs sampled)
ws.js:208 Array<Int> x 0.50 ops/sec ±5.44% (7 runs sampled)
ws.js:208 Object x 0.08 ops/sec ±2.21% (5 runs sampled)
ws.js:211 Fastest is Int8Array

ws.js:208 Float64Array x 0.11 ops/sec ±8.90% (5 runs sampled)
ws.js:208 Float32Array x 0.65 ops/sec ±6.22% (7 runs sampled)
ws.js:208 Int32Array x 0.32 ops/sec ±2.26% (6 runs sampled)
ws.js:208 Int8Array x 9.74 ops/sec ±17.91% (27 runs sampled)
ws.js:208 Array x 0.11 ops/sec ±0.46% (5 runs sampled)
ws.js:208 Array<Int> x 0.50 ops/sec ±3.44% (7 runs sampled)
ws.js:208 Object x 0.08 ops/sec ±1.92% (5 runs sampled)
ws.js:211 Fastest is Int8Array
